(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> "
p3
sS'layer'
p4
S'/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/applications/IAPTassessment/controllers/comics.py'
p5
sS'code'
p6
S"__author__ = 'miguel'\n\nimport helper\n\n\ndef mycomics():\n    items_per_page = 10\n    if len(request.args):\n        page = int(request.args[0])\n    else:\n        page = 0\n    if len(request.args) == 2:\n        numitems = int(request.args[1])\n    else:\n        numitems = db((db.auth.user_id == db.comicbox.id) & (db.comicbook.box_id == db.comicbox.id)).count()\n\n    previousItems = items_per_page*page\n\n\n\n    user_comics = db((auth.user_id == db.comicbox.user_id) &\n                     (db.comicbox.id == db.comicbook.box_id)).select(db.comicbook.id, db.comicbox.id,\n                                                                     db.comicbox.name, db.comicbook.title,\n                                                                     db.comicbook.cover, db.comicbook.issue_number,\n                                                                     db.comicbook.publisher, db.comicbook.description,\n                                                                     limitby=(page * items_per_page,\n                                                                              (page + 1) * items_per_page))\n    user_comics_id = []\n    for row in user_comics:\n        user_comics_id.append(row.comicbook.id)\n\n    artist_comics = db(\n        (db.artist.id == db.comicArtist.artist_id) & (db.comicArtist.comicbook_id.belongs(user_comics_id))).select(\n        db.comicArtist.comicbook_id, db.artist.name)\n    writer_comics = db(\n        (db.writer.id == db.comicWriter.writer_id) & (db.comicWriter.comicbook_id.belongs(user_comics_id))).select(\n        db.comicWriter.comicbook_id, db.writer.name)\n\n    return {'user_comics': user_comics, 'artist_comics': artist_comics, 'writer_comics': writer_comics, 'page': page,\n            'display_next': previousItems>(page+1)*items_per_page}\n    # return {'user_comics': user_comics}\n\n\ndef comicview():\n    # Verify comicbookid exists\n    if request.vars.comicbookid is None:\n        redirect(URL('default', 'error', vars={\n            'errormsg': 'Error: invalid data id:' + request.vars.comicbookid}))\n\n    if len(db(db.comicbook.id == request.vars.comicbookid).select(db.comicbook.id)) == 0:\n        redirect(URL('default', 'error', vars={\n            'errormsg': 'Error: data id does not exist in database'}))\n\n    left_joins = [db.comicWriter.on(db.comicWriter.comicbook_id == db.comicbook.id),\n                  db.writer.on(db.comicWriter.writer_id == db.writer.id),\n                  db.comicArtist.on(db.comicArtist.comicbook_id == db.comicbook.id),\n                  db.artist.on(db.comicArtist.artist_id == db.artist.id),\n                  db.publisher.on(db.comicbook.publisher == db.publisher.id)]\n\n    comic_details = db((db.comicbook.id == request.vars.comicbookid) & (db.comicbook.box_id == db.comicbox.id)).select(\n        db.comicbook.title,\n        db.comicbook.issue_number,\n        db.comicbox.user_id,\n        db.comicbox.name,\n        db.comicbook.description,\n        db.artist.name, db.writer.name,\n        db.comicbook.cover, db.publisher.name,\n        left=left_joins)\n    data = comic_details[0]\n    comics_writers = db((db.comicWriter.comicbook_id == request.vars.comicbookid) &\n                        (db.comicWriter.writer_id == db.writer.id)).select(db.writer.name).column()\n    comics_artists = db((db.comicArtist.comicbook_id == request.vars.comicbookid) &\n                        (db.comicArtist.artist_id == db.artist.id)).select(db.artist.name).column()\n    return {'comicbookid': request.vars.comicbookid,\n            'box_name': data.comicbox.name,\n            'title': data.comicbook.title,\n            'cover': data.comicbook.cover,\n            'issue_number': data.comicbook.issue_number,\n            'writers': comics_writers,\n            'artists': comics_artists,\n            'description': data.comicbook.description,\n            'publisher': data.publisher.name,\n            'owns_comic': data.comicbox.user_id == auth.user_id}\n\n\ndef comiccreate():\n    # Verify comicbookid exists\n    if auth.user_id is None:\n        redirect(URL('default', 'error', vars={\n            'errormsg': 'An error has occured: user is not logged in. Please login or create an account using the menu in the top right.'}))\n\n    comicdata = {}\n    if request.vars.comicbookid is not None:\n        comicdata = comicview()\n\n    defaultTitle = comicdata.get('title', '')\n    defaultCover = comicdata.get('cover', '')\n\n    # As copied from other user, current user cannot be guaranteed to have same box\n    defaultBoxName = 'Unfiled'\n    defaultArtists = comicdata.get('artists', [])\n    defaultWriters = comicdata.get('writers', [])\n    defaultPublisher = comicdata.get('publisher', '')\n    defaultIssue_number = comicdata.get('issue_number', '')\n    defaultDescription = comicdata.get('description', '')\n\n    if request.vars.boxid is not None:\n        print request.vars.boxid\n        defaultBoxName = db(db.comicbox.id == request.vars.boxid).select(db.comicbox.name).column()[0]\n\n    user_boxes = db(auth.user_id == db.comicbox.user_id).select(db.comicbox.name).column()\n    if defaultBoxName not in user_boxes:\n        defaultBoxName = user_boxes[0]\n\n    form = SQLFORM.factory(\n        Field('title', type='string', default=defaultTitle, required=True, requires=IS_NOT_EMPTY()),\n        Field('box_name', type='string', default=defaultBoxName, required=True,\n              requires=IS_IN_SET(user_boxes, zero=None)),\n        Field('cover', type='upload', default=defaultCover, uploadfolder='uploads', requires=IS_EMPTY_OR(IS_IMAGE())),\n        Field('artists', type='list:string', default=defaultArtists),\n        Field('writers', type='list:string', default=defaultWriters),\n        Field('publisher', type='string', default=defaultPublisher),\n        Field('issue_number', type='integer', default=defaultIssue_number),\n        Field('description', type='text', default=defaultDescription),\n        table_name='comicbook', upload=URL('uploads'))\n\n    if form.process().accepted:\n        helper.submit_comiccreate_form(form, db, request, auth)\n        ##TODO add confirmation message\n        redirect(URL('comics', 'mycomics'))\n\n    return {'form': form}\n\n\ndef comicedit():\n    # Verify comicbookid exists\n    if request.vars.comicbookid is None:\n        redirect(URL('default', 'error', vars={\n            'errormsg': 'Error: invalid comicbook id:' + request.vars.comicbookid}))\n\n    if len(db(db.comicbook.id == request.vars.comicbookid).select(db.comicbook.id)) == 0:\n        redirect(URL('default', 'error', vars={\n            'errormsg': 'Error: comicbook id does not exist in database'}))\n\n    user_boxes = db(auth.user_id == db.comicbox.user_id).select(db.comicbox.name).column()\n\n    # Verify user owns comicbook\n    if len(db((db.comicbox.user_id == auth.user_id) & (db.comicbook.id == request.vars.comicbookid)\n                      & (db.comicbook.box_id == db.comicbox.id)).select()) == 0:\n        redirect(URL('default', 'error', vars={\n            'errormsg': 'An error has occured: attempting to edit another user\\'s comic'}))\n\n    left_joins = [db.comicWriter.on(db.comicWriter.comicbook_id == db.comicbook.id),\n                  db.writer.on(db.comicWriter.writer_id == db.writer.id),\n                  db.comicArtist.on(db.comicArtist.comicbook_id == db.comicbook.id),\n                  db.artist.on(db.comicArtist.artist_id == db.artist.id),\n                  db.publisher.on(db.comicbook.publisher == db.publisher.id)]\n\n    comic_details = db((db.comicbook.id == request.vars.comicbookid) & (db.comicbook.box_id == db.comicbox.id)).select(\n        db.comicbook.title, db.comicbook.id,\n        db.comicbook.issue_number,\n        db.comicbox.name,\n        db.comicbook.description,\n        db.artist.name, db.writer.name,\n        db.comicbook.cover, db.publisher.name,\n        left=left_joins)\n    comicbook = comic_details[0].comicbook\n    comics_writers = db((db.comicWriter.comicbook_id == request.vars.comicbookid) &\n                        (db.comicWriter.writer_id == db.writer.id)).select(db.writer.name).column()\n    comics_artists = db((db.comicArtist.comicbook_id == request.vars.comicbookid) &\n                        (db.comicArtist.artist_id == db.artist.id)).select(db.artist.name).column()\n\n    user_boxes = db(auth.user_id == db.comicbox.user_id).select(db.comicbox.name).column()\n\n    form = SQLFORM.factory(\n        Field('title', type='string', default=comicbook.title, required=True, requires=IS_NOT_EMPTY()),\n        Field('box_name', type='string', required=True, default=comic_details[0].comicbox.name,\n              requires=IS_IN_SET(user_boxes, zero=None)),\n        Field('cover', type='upload', uploadfolder='upload'),\n        Field('artists', type='list:string', default=comics_artists, requires=IS_NOT_EMPTY()),\n        Field('writers', type='list:string', default=comics_writers, requires=IS_NOT_EMPTY()),\n        Field('publisher', type='string', default=comic_details[0].publisher.name),\n        Field('update_all', type='boolean', default=False,\n              label='Update the publisher of all of your comics with the same publisher.'),\n        Field('issue_number', type='string', default=comicbook.issue_number),\n        Field('description', type='text', default=comicbook.description), table_name='comicbook')\n\n    if form.process().accepted:\n        helper.submit_comicedit_form(form, db, request, auth)\n        # TODO add confirmation of success message\n        redirect(URL('comics', 'mycomics'))\n\n    return {'form': form}\n\n\ndef comicdelete():\n    print request.vars.comicbookid\n    db(db.comicbook.id == request.vars.comicbookid).delete()\n    redirect(URL('comics', 'mycomics'))\n\nresponse._vars=response._caller(mycomics)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/applications/IAPTassessment/controllers/comics.py", line 201, in <module>\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/applications/IAPTassessment/controllers/comics.py", line 15, in mycomics\n    numitems = db((db.auth.user_id == db.comicbox.id) & (db.comicbook.box_id == db.comicbox.id)).count()\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/gluon/packages/dal/pydal/base.py", line 906, in __getattr__\n    return super(DAL, self).__getattr__(key)\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/gluon/packages/dal/pydal/helpers/classes.py", line 30, in __getattr__\n    raise AttributeError\nAttributeError\n'
p11
s.