(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Query' object has no attribute 'select'"
p3
sS'layer'
p4
S'/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/applications/IAPTassessment/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n########################################################################\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n########################################################################\n\n\n# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n########################################################################\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n########################################################################\nimport os\nimport time\nimport helper\n\n\ndef index():\n    largest_boxes = get_largest_boxes(5)\n    recent_boxes = get_recent_boxes(5)\n    return {\'largest_boxes\': largest_boxes, \'recent_boxes\': recent_boxes}\n\n\ndef search():\n    form = SQLFORM.factory(\n        Field(\'keyword\', type=\'string\'),\n        Field(\'title\', type=\'string\'),\n        Field(\'writer\', type=\'string\'),\n        Field(\'artist\', type=\'string\'),\n        Field(\'publisher\', type=\'string\'),\n        Field(\'keyword\', type=\'string\'))\n    finalsearchresults = []\n    if form.process().accepted:\n        fields = form.vars\n        field_results = []\n\n        if helper.notempty(fields.keyword):\n            # Search all fields and intersect\n            keyword_results = db(db.comicbook.title.like(\'%\' + fields.keyword + \'%\')).select(db.comicbook.id).column(\n                db.comicbook.id)\n\n            keyword_results.extend(db((db.publisher.name.like(\'%\' + fields.keyword + \'%\'))\n                                      & (db.comicbook.publisher == db.publisher.id)) \\\n                                   .select(db.comicbook.id).column(db.comicbook.id))\n\n            keyword_results.extend(db(db.writer.name.like(\'%\' + fields.keyword + \'%\') &\n                                      (db.comicWriter.writer_id == db.writer.id) &\n                                      (db.comicbook.id == db.comicWriter.comicbook_id))\n                                   .select(db.comicbook.id).column(db.comicbook.id))\n\n            keyword_results.extend(db(db.artist.name.like(\'%\' + fields.keyword + \'%\') &\n                                      (db.comicArtist.artist_id == db.artist.id) &\n                                      (db.comicbook.id == db.comicArtist.comicbook_id)).select(db.comicbook.id).column(\n                db.comicbook.id))\n            field_results.append(keyword_results)\n\n        if helper.notempty(fields.title):\n            field_results.append(\n                db(db.comicbook.title.like(\'%\' + fields.title + \'%\')).select(db.comicbook.id).column(\n                    db.comicbook.id))\n\n        if helper.notempty(fields.publisher):\n            field_results.append(\n                db((db.publisher.name.like(\'%\' + fields.publisher + \'%\')) & (\n                    db.comicbook.publisher == db.publisher.id)).select(db.comicbook.id).column(\n                    db.comicbook.id))\n\n        if helper.notempty(fields.writer):\n            field_results.append(db(db.writer.name.like(\'%\' + fields.writer + \'%\') &\n                                    (db.comicWriter.writer_id == db.writer.id) &\n                                    (db.comicbook.id == db.comicWriter.comicbook_id)).select(db.comicbook.id).column(\n                db.comicbook.id))\n\n        if helper.notempty(fields.artist):\n            field_results.append(db(db.artist.name.like(\'%\' + fields.artist + \'%\') &\n                                    (db.comicArtist.artist_id == db.artist.id) &\n                                    (db.comicbook.id == db.comicArtist.comicbook_id)).select(db.comicbook.id).column(\n                db.comicbook.id))\n\n        if len(field_results) > 0:\n            intersected_results = helper.intersect(field_results)\n\n            left_joins = [db.comicWriter.on(db.comicWriter.comicbook_id == db.comicbook.id),\n                          db.writer.on(db.comicWriter.writer_id == db.writer.id),\n                          db.comicArtist.on(db.comicArtist.comicbook_id == db.comicbook.id),\n                          db.artist.on(db.comicArtist.artist_id == db.artist.id)]\n\n            search_results = db(\n                db.comicbook.id.belongs(intersected_results) & (db.comicbook.box_id == db.comicbox.id) & (\n                    db.comicbook.publisher == db.publisher.id)).select(db.comicbook.title,\n                                                                       db.comicbook.id,\n                                                                       db.comicbook.issue_number,\n                                                                       db.comicbox.name, db.comicbox.user_id,\n                                                                       db.artist.name, db.writer.name,\n                                                                       db.publisher.name,\n                                                                       left=left_joins)\n            for row1 in search_results:\n                row1.writerNames = [row1.writer.name]\n                row1.artistNames = [row1.artist.name]\n                for row2 in search_results:\n                    if row1.comicbook.id == row2.comicbook.id:\n                        if row2.writer.name not in row1.writerNames:\n                            row1.writerNames.append(row2.writer.name)\n                        if row2.artist.name not in row1.artistNames:\n                            row1.artistNames.append(row2.artist.name)\n            viewedids = []\n            # Remove duplicates and format strings for view\n            for row in list(search_results):\n                if row.comicbook.id not in viewedids:\n                    viewedids.append(row.comicbook.id)\n                    row.isOwnedByCurrentUser = (row.comicbox.user_id == auth.user_id)\n                    row.artistNames = helper.concatlist(row.artistNames)\n                    row.writerNames = helper.concatlist(row.writerNames)\n                    finalsearchresults.append(row)\n\n    elif form.errors:\n        return form.errors\n    return {\'search_results\': finalsearchresults, \'form2\': form}\n\n\ndef get_largest_boxes(num_boxes):\n    count = db.comicbox.id.count()\n    largest_boxes = db((db.comicbox.id == db.comicbook.box_id) & (db.comicbox.private == False).select(db.comicbox.id,\n                db.comicbox.name,\n                db.comicbox.created_on,\n                count,\n                orderby=~count,\n                groupby=db.comicbox.id,\n                limitby=(\n                    0, num_boxes)))\n\n    boxes = []\n    for box in largest_boxes:\n        comics = db(db.comicbook.box_id == box.comicbox.id).select(db.comicbook.title, db.comicbook.cover,\n                    db.comicbook.description, db.comicbook.issue_number,\n                    db.comicbook.publisher)\n\n        boxes.append((helper.re_assemble_box_with_count(box), comics))\n\n    return boxes\n\n\ndef get_recent_boxes(num_boxes):\n    count = db.comicbox.id.count()\n    recent_boxes = db((db.comicbox.id == db.comicbook.box_id) & (db.comicbox.private == False)).select(db.comicbox.id,\n                db.comicbox.name,\n                db.comicbox.created_on,\n                count,\n                orderby=~db.comicbox.created_on,\n                groupby=db.comicbox.id,\n                limitby=(\n                    0, num_boxes))\n    boxes = []\n    for box in recent_boxes:\n        comics = db(db.comicbook.box_id == box.comicbox.id).select(db.comicbook.title,\n                                                                   db.comicbook.cover, db.comicbook.description,\n                                                                   db.comicbook.issue_number, db.comicbook.publisher)\n        boxes.append((helper.re_assemble_box_with_count(box), comics))\n\n    return boxes\n\n\ndef error():\n    return {\'errormsg\': request.vars.errormsg}\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef fast_download():\n    # very basic security (only allow fast_download on db.comicbook.cover):\n    if not request.args(0).startswith("db.comicbook.cover"):\n        return download()\n    # remove/add headers that prevent/favors client-side caching\n    # 7days\n    response.headers[\'Cache-Control\'] = "max-age=604800"\n    del response.headers[\'Pragma\']\n    del response.headers[\'Expires\']\n    filename = os.path.join(request.folder, \'uploads\', request.args(0))\n    # send last modified date/time so client browser can enable client-side caching\n    print filename\n    response.headers[\'Last-Modified\'] = time.strftime("%a, %d %b %Y %H:%M:%S +0000",\n                                                      time.localtime(os.path.getmtime(filename)))\n\n    return response.stream(open(filename, \'rb\'))\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/applications/IAPTassessment/controllers/default.py", line 230, in <module>\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/applications/IAPTassessment/controllers/default.py", line 27, in index\n    largest_boxes = get_largest_boxes(5)\n  File "/usr/userfs/m/mb1069/Downloads/IAPTassessment/web2py/applications/IAPTassessment/controllers/default.py", line 131, in get_largest_boxes\n    largest_boxes = db((db.comicbox.id == db.comicbook.box_id) & (db.comicbox.private == False).select(db.comicbox.id,\nAttributeError: \'Query\' object has no attribute \'select\'\n'
p11
s.