(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> int() argument must be a string or a number, not 'NoneType'"
p3
sS'layer'
p4
S'/home/miguel/Documents/IAPT/web2py/applications/IAPTassessment/controllers/boxes.py'
p5
sS'code'
p6
S'import helper\n\n\ndef boxview():\n    print request.vars\n    # Deal with non-existent Ids\n    if len(db(db.comicbox.id == request.vars.boxid).select(db.comicbox.id)) == 0:\n        session.flash = \'Box ID does not exist!\'\n        redirect(URL(\'default\', \'index\'))\n    # Deal with private boxes\n    box = db(db.comicbox.id == request.vars.boxid).select()[0]\n\n    if box.private & (box.user_id != auth.user_id):\n        session.flash = \'Box is private!\'\n        redirect(URL(\'default\', \'index\'))\n\n    items_per_page = 5\n\n    if len(request.vars):\n        page = int(request.vars.page)\n    else:\n        page = 0\n    if len(request.args) == 2:\n        numitems = int(request.vars.numitems)\n    else:\n        numitems = db(db.comicbook.box_id == request.vars.boxid).count()\n\n    box_comics = db((db.comicbox.id == request.vars.boxid) & (db.comicbook.box_id == request.vars.boxid)).select(\n        db.comicbook.id, db.comicbox.id,\n        db.comicbox.name, db.comicbook.title,\n        db.comicbook.cover, db.comicbook.issue_number,\n        db.comicbook.publisher, db.comicbook.description, limitby=(page * items_per_page, (page + 1) * items_per_page))\n    record = db.comicbox(request.vars.boxid)\n    form = SQLFORM(db.comicbox, record, deletable=True, submit_button="Update", delete_label="Check to delete")\n    form.vars.name = db(db.comicbox.id == request.vars.boxid).select(db.comicbox.id).column()[0]\n\n    if form.process().accepted:\n\n        if form.deleted:\n            helper.move_comics_to_unfiled(db, auth.user_id)\n            session.flash = \'Box deleted!\'\n            redirect(URL(\'boxes\', \'myboxes\'))\n        else:\n            session.flash = \'form accepted\'\n\n    user_comics_id = []\n    for row in box_comics:\n        user_comics_id.append(row.comicbook.id)\n    artist_comics = db(\n        (db.artist.id == db.comicArtist.artist_id) & (db.comicArtist.comicbook_id.belongs(user_comics_id))).select(\n        db.comicArtist.comicbook_id, db.artist.name)\n    writer_comics = db(\n        (db.writer.id == db.comicWriter.writer_id) & (db.comicWriter.comicbook_id.belongs(user_comics_id))).select(\n        db.comicWriter.comicbook_id, db.writer.name)\n\n    return {\'boxdetails\': db(db.comicbox.id == request.vars.boxid).select()[0],\n            \'box_comics\': box_comics,\n            \'artist_comics\': artist_comics,\n            \'writer_comics\': writer_comics,\n            \'form\': form,\n            "page": page,\n            "numitems": numitems,\n            "display_next": numitems>(page+1)*items_per_page}\n\n\ndef boxcreate():\n    form = SQLFORM(db.comicbox)\n    form.vars.user_id = auth.user_id\n    if form.process().accepted:\n        session.flash = \'Created box!\'\n        redirect(URL(\'boxes\', \'myboxes\'))\n    return {\'form\': form}\n\n\ndef myboxes():\n    items_per_page = 5\n\n    if len(request.args):\n        page = int(request.args[0])\n    else:\n        page = 0\n    if len(request.args) == 2:\n        numitems = int(request.args[1])\n    else:\n        numitems = db(auth.user_id == db.comicbox.user_id).count()\n\n\n    user_boxes = db(auth.user_id == db.comicbox.user_id).select(\n        db.comicbox.id,\n        db.comicbox.name,\n        db.comicbox.created_on,\n        groupby=db.comicbox.name, limitby=(page * items_per_page, (page + 1) * items_per_page))\n\n\n\n\n    boxes = []\n    for box in user_boxes:\n        comics = db(db.comicbook.box_id == box.id).select(db.comicbook.title,\n                                                          db.comicbook.cover, db.comicbook.description,\n                                                          db.comicbook.issue_number, db.comicbook.publisher)\n        box.count = len(comics)\n        boxes.append((box, comics))\n    return {\'user_boxes\': boxes, \'page\': page,\n            \'display_next\': numitems>(page+1)*items_per_page}\n\nresponse._vars=response._caller(boxview)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/miguel/Documents/IAPT/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/miguel/Documents/IAPT/web2py/applications/IAPTassessment/controllers/boxes.py", line 107, in <module>\n  File "/home/miguel/Documents/IAPT/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/miguel/Documents/IAPT/web2py/applications/IAPTassessment/controllers/boxes.py", line 20, in boxview\n    page = int(request.vars.page)\nTypeError: int() argument must be a string or a number, not \'NoneType\'\n'
p11
s.